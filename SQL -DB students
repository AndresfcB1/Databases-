login psql env
psql --username=freecodecamp --dbname=postgres


- gpa value 
students=> ALTER TABLE students ADD COLUMN gpa NUMERIC(2,1);

_ Create a transiction table

There's one thing missing. This table doesn't have a primary key.
The data from courses.csv will go in this table. A single major will
be in it multiple times, and same with a course. So neither of them 
can be a primary key. But there will never be a row with the same two
values as another row. So the two columns together, are unique. You can 
create a composite primary key that uses more than one column as a unique 
pair like this: 
ALTER TABLE <table_name> ADD PRIMARY KEY(<column_name>, <column_name>); 
Add a composite primary key to the table using the two columns.



OUT DATA INTO VARIABLES ACCORDING TO COLUMMNS OF THE CSV FILE AND PRINT THEM IN THE CONSOLE.

cat courses.csv | while IFS="," read MAJOR COURSE
do
  echo $MAJOR $COURSE
done



You used the psql command to log in and interact with the database. 
You can use it to just run a single command and exit. Above your loop, 
add a PSQL variable that looks like this:

PSQL="psql -X --username=freecodecamp --dbname=students --no-align --tuples-only -c"

This will allow you to query your database from your script.
The important parts are the username, dbname, and the -c flag that is for running a single
command and exiting. The rest of the flags are for formatting.


SELECT MAJOR_ID, SELECTING THE  POSITION CONTAINS THE NAME

MAJOR_ID=$($PSQL "SELECT major_id FROM majors WHERE major='$MAJOR'")



DELETE INFO IN TABLE PSQL terminal=
- TRUNCATE <table name, table name>

Insert data  in the database from a bash file 

-if [[ -z $MAJOR_ID ]]
then
#insert major
INSERT_MAJOR_RESULT=$($PSQL "INSERT INTO majors(major) VALUES('$MAJOR')")
echo $INSERT_MAJOR_RESULT 
#get new major_id
fi


TO AVOID ADDING FIRST LINE ELEMENTS YOU CAN COMPARE VALUES

do
if [[ $MAJOR != major ]]
then
#get major_id
MAJOR_ID=$($PSQL "SELECT major_id FROM majors WHERE major='$MAJOR'")
#if not found
if [[ -z $MAJOR_ID ]]
then
#insert major
INSERT_MAJOR_RESULT=$($PSQL "INSERT INTO majors(major) VALUES('$MAJOR')")
echo $INSERT_MAJOR_RESULT 
#get new major_id
fi
#get course_id
#if not found
#insert course
#get new course_id
#insert into majors_courses
fi
done



TRUNCATE DATA TABLE FROM THE BASH FILE

-echo $($PSQL "TRUNCATE students, majors, courses, majors_courses");

COMPLETE FIRST PART STUDENT DATABASE

--
-- PostgreSQL database dump
--

-- Dumped from database version 12.9 (Ubuntu 12.9-2.pgdg20.04+1)
-- Dumped by pg_dump version 12.9 (Ubuntu 12.9-2.pgdg20.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP DATABASE students;
--
-- Name: students; Type: DATABASE; Schema: -; Owner: freecodecamp
--

CREATE DATABASE students WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';


ALTER DATABASE students OWNER TO freecodecamp;

\connect students

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: courses; Type: TABLE; Schema: public; Owner: freecodecamp
--

CREATE TABLE public.courses (
    course_id integer NOT NULL,
    course character varying(100) NOT NULL
);


ALTER TABLE public.courses OWNER TO freecodecamp;

--
-- Name: courses_course_id_seq; Type: SEQUENCE; Schema: public; Owner: freecodecamp
--

CREATE SEQUENCE public.courses_course_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.courses_course_id_seq OWNER TO freecodecamp;

--
-- Name: courses_course_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: freecodecamp
--

ALTER SEQUENCE public.courses_course_id_seq OWNED BY public.courses.course_id;


--
-- Name: majors; Type: TABLE; Schema: public; Owner: freecodecamp
--

CREATE TABLE public.majors (
    major_id integer NOT NULL,
    major character varying(50) NOT NULL
);


ALTER TABLE public.majors OWNER TO freecodecamp;

--
-- Name: majors_courses; Type: TABLE; Schema: public; Owner: freecodecamp
--

CREATE TABLE public.majors_courses (
    major_id integer NOT NULL,
    course_id integer NOT NULL
);


ALTER TABLE public.majors_courses OWNER TO freecodecamp;

--
-- Name: majors_major_id_seq; Type: SEQUENCE; Schema: public; Owner: freecodecamp
--

CREATE SEQUENCE public.majors_major_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.majors_major_id_seq OWNER TO freecodecamp;

--
-- Name: majors_major_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: freecodecamp
--

ALTER SEQUENCE public.majors_major_id_seq OWNED BY public.majors.major_id;


--
-- Name: students; Type: TABLE; Schema: public; Owner: freecodecamp
--

CREATE TABLE public.students (
    student_id integer NOT NULL,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    major_id integer,
    gpa numeric(2,1)
);


ALTER TABLE public.students OWNER TO freecodecamp;

--
-- Name: students_student_id_seq; Type: SEQUENCE; Schema: public; Owner: freecodecamp
--

CREATE SEQUENCE public.students_student_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_student_id_seq OWNER TO freecodecamp;

--
-- Name: students_student_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: freecodecamp
--

ALTER SEQUENCE public.students_student_id_seq OWNED BY public.students.student_id;


--
-- Name: courses course_id; Type: DEFAULT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.courses ALTER COLUMN course_id SET DEFAULT nextval('public.courses_course_id_seq'::regclass);


--
-- Name: majors major_id; Type: DEFAULT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.majors ALTER COLUMN major_id SET DEFAULT nextval('public.majors_major_id_seq'::regclass);


--
-- Name: students student_id; Type: DEFAULT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.students ALTER COLUMN student_id SET DEFAULT nextval('public.students_student_id_seq'::regclass);


--
-- Data for Name: courses; Type: TABLE DATA; Schema: public; Owner: freecodecamp
--

INSERT INTO public.courses VALUES (23, 'Data Structures and Algorithms');
INSERT INTO public.courses VALUES (24, 'Web Programming');
INSERT INTO public.courses VALUES (25, 'Database Systems');
INSERT INTO public.courses VALUES (26, 'Computer Networks');
INSERT INTO public.courses VALUES (27, 'SQL');
INSERT INTO public.courses VALUES (28, 'Machine Learning');
INSERT INTO public.courses VALUES (29, 'Computer Systems');
INSERT INTO public.courses VALUES (30, 'Web Applications');
INSERT INTO public.courses VALUES (31, 'Artificial Intelligence');
INSERT INTO public.courses VALUES (32, 'Python');
INSERT INTO public.courses VALUES (33, 'Object-Oriented Programming');
INSERT INTO public.courses VALUES (34, 'Calculus');
INSERT INTO public.courses VALUES (35, 'Game Architecture');
INSERT INTO public.courses VALUES (36, 'Algorithms');
INSERT INTO public.courses VALUES (37, 'UNIX');
INSERT INTO public.courses VALUES (38, 'Server Administration');
INSERT INTO public.courses VALUES (39, 'Network Security');


--
-- Data for Name: majors; Type: TABLE DATA; Schema: public; Owner: freecodecamp
--

INSERT INTO public.majors VALUES (36, 'Database Administration');
INSERT INTO public.majors VALUES (37, 'Web Development');
INSERT INTO public.majors VALUES (38, 'Data Science');
INSERT INTO public.majors VALUES (39, 'Network Engineering');
INSERT INTO public.majors VALUES (40, 'Computer Programming');
INSERT INTO public.majors VALUES (41, 'Game Design');
INSERT INTO public.majors VALUES (42, 'System Administration');


--
-- Data for Name: majors_courses; Type: TABLE DATA; Schema: public; Owner: freecodecamp
--

INSERT INTO public.majors_courses VALUES (36, 23);
INSERT INTO public.majors_courses VALUES (37, 24);
INSERT INTO public.majors_courses VALUES (36, 25);
INSERT INTO public.majors_courses VALUES (38, 23);
INSERT INTO public.majors_courses VALUES (39, 26);
INSERT INTO public.majors_courses VALUES (36, 27);
INSERT INTO public.majors_courses VALUES (38, 28);
INSERT INTO public.majors_courses VALUES (39, 29);
INSERT INTO public.majors_courses VALUES (40, 26);
INSERT INTO public.majors_courses VALUES (36, 30);
INSERT INTO public.majors_courses VALUES (41, 31);
INSERT INTO public.majors_courses VALUES (38, 32);
INSERT INTO public.majors_courses VALUES (40, 33);
INSERT INTO public.majors_courses VALUES (42, 29);
INSERT INTO public.majors_courses VALUES (41, 34);
INSERT INTO public.majors_courses VALUES (37, 23);
INSERT INTO public.majors_courses VALUES (38, 34);
INSERT INTO public.majors_courses VALUES (37, 33);
INSERT INTO public.majors_courses VALUES (41, 35);
INSERT INTO public.majors_courses VALUES (42, 26);
INSERT INTO public.majors_courses VALUES (41, 36);
INSERT INTO public.majors_courses VALUES (42, 37);
INSERT INTO public.majors_courses VALUES (42, 38);
INSERT INTO public.majors_courses VALUES (40, 29);
INSERT INTO public.majors_courses VALUES (40, 32);
INSERT INTO public.majors_courses VALUES (39, 39);
INSERT INTO public.majors_courses VALUES (37, 30);
INSERT INTO public.majors_courses VALUES (39, 36);


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: freecodecamp
--

INSERT INTO public.students VALUES (6, 'Rhea', 'Kellems', 36, 2.5);
INSERT INTO public.students VALUES (7, 'Emma', 'Gilbert', NULL, NULL);
INSERT INTO public.students VALUES (8, 'Kimberly', 'Whitley', 37, 3.8);
INSERT INTO public.students VALUES (9, 'Jimmy', 'Felipe', 36, 3.7);
INSERT INTO public.students VALUES (10, 'Kyle', 'Stimson', NULL, 2.8);
INSERT INTO public.students VALUES (11, 'Casares', 'Hijo', 41, 4.0);
INSERT INTO public.students VALUES (12, 'Noe', 'Savage', NULL, 3.6);
INSERT INTO public.students VALUES (13, 'Sterling', 'Boss', 41, 3.9);
INSERT INTO public.students VALUES (14, 'Brian', 'Davis', NULL, 2.3);
INSERT INTO public.students VALUES (15, 'Kaija', 'Uronen', 41, 3.7);
INSERT INTO public.students VALUES (16, 'Faye', 'Conn', 41, 2.1);
INSERT INTO public.students VALUES (17, 'Efren', 'Reilly', 37, 3.9);
INSERT INTO public.students VALUES (18, 'Danh', 'Nhung', NULL, 2.4);
INSERT INTO public.students VALUES (19, 'Maxine', 'Hagenes', 36, 2.9);
INSERT INTO public.students VALUES (20, 'Larry', 'Saunders', 38, 2.2);
INSERT INTO public.students VALUES (21, 'Karl', 'Kuhar', 37, NULL);
INSERT INTO public.students VALUES (22, 'Lieke', 'Hazenveld', 41, 3.5);
INSERT INTO public.students VALUES (23, 'Obie', 'Hilpert', 37, NULL);
INSERT INTO public.students VALUES (24, 'Peter', 'Booysen', NULL, 2.9);
INSERT INTO public.students VALUES (25, 'Nathan', 'Turner', 36, 3.3);
INSERT INTO public.students VALUES (26, 'Gerald', 'Osiki', 38, 2.2);
INSERT INTO public.students VALUES (27, 'Vanya', 'Hassanah', 41, 4.0);
INSERT INTO public.students VALUES (28, 'Roxelana', 'Florescu', 36, 3.2);
INSERT INTO public.students VALUES (29, 'Helene', 'Parker', 38, 3.4);
INSERT INTO public.students VALUES (30, 'Mariana', 'Russel', 37, 1.8);
INSERT INTO public.students VALUES (31, 'Ajit', 'Dhungel', NULL, 3.0);
INSERT INTO public.students VALUES (32, 'Mehdi', 'Vandenberghe', 36, 1.9);
INSERT INTO public.students VALUES (33, 'Dejon', 'Howell', 37, 4.0);
INSERT INTO public.students VALUES (34, 'Aliya', 'Gulgowski', 42, 2.6);
INSERT INTO public.students VALUES (35, 'Ana', 'Tupajic', 38, 3.1);
INSERT INTO public.students VALUES (36, 'Hugo', 'Duran', NULL, 3.8);


--
-- Name: courses_course_id_seq; Type: SEQUENCE SET; Schema: public; Owner: freecodecamp
--

SELECT pg_catalog.setval('public.courses_course_id_seq', 39, true);


--
-- Name: majors_major_id_seq; Type: SEQUENCE SET; Schema: public; Owner: freecodecamp
--

SELECT pg_catalog.setval('public.majors_major_id_seq', 42, true);


--
-- Name: students_student_id_seq; Type: SEQUENCE SET; Schema: public; Owner: freecodecamp
--

SELECT pg_catalog.setval('public.students_student_id_seq', 36, true);


--
-- Name: courses courses_pkey; Type: CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.courses
    ADD CONSTRAINT courses_pkey PRIMARY KEY (course_id);


--
-- Name: majors_courses majors_courses_pkey; Type: CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.majors_courses
    ADD CONSTRAINT majors_courses_pkey PRIMARY KEY (major_id, course_id);


--
-- Name: majors majors_pkey; Type: CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.majors
    ADD CONSTRAINT majors_pkey PRIMARY KEY (major_id);


--
-- Name: students students_pkey; Type: CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_pkey PRIMARY KEY (student_id);


--
-- Name: majors_courses majors_courses_course_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.majors_courses
    ADD CONSTRAINT majors_courses_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(course_id);


--
-- Name: majors_courses majors_courses_major_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.majors_courses
    ADD CONSTRAINT majors_courses_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);


--
-- Name: students students_major_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: freecodecamp
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);


--
-- PostgreSQL database dump complete
--



BASH FILE

-------------------------------------------------------------------------------------------------------------
#!/bin/bash

# Script to insert data from courses.csv and students.csv into students database

PSQL="psql -X --username=freecodecamp --dbname=students --no-align --tuples-only -c"
echo $($PSQL "TRUNCATE students, majors, courses, majors_courses")

cat courses.csv | while IFS="," read MAJOR COURSE
do
  if [[ $MAJOR != "major" ]]
  then
    # get major_id
    MAJOR_ID=$($PSQL "SELECT major_id FROM majors WHERE major='$MAJOR'")

    # if not found
    if [[ -z $MAJOR_ID ]]
    then
      # insert major
      INSERT_MAJOR_RESULT=$($PSQL "INSERT INTO majors(major) VALUES('$MAJOR')")
      if [[ $INSERT_MAJOR_RESULT == "INSERT 0 1" ]]
      then
        echo Inserted into majors, $MAJOR
      fi

      # get new major_id
      MAJOR_ID=$($PSQL "SELECT major_id FROM majors WHERE major='$MAJOR'")
    fi

    # get course_id
    COURSE_ID=$($PSQL "SELECT course_id FROM courses WHERE course='$COURSE'")

    # if not found
    if [[ -z $COURSE_ID ]]
    then
      # insert course
      INSERT_COURSE_RESULT=$($PSQL "INSERT INTO courses(course) VALUES('$COURSE')")
      if [[ $INSERT_COURSE_RESULT == "INSERT 0 1" ]]
      then
        echo Inserted into courses, $COURSE
      fi

      # get new course_id
      COURSE_ID=$($PSQL "SELECT course_id FROM courses WHERE course='$COURSE'")
    fi

    # insert into majors_courses
    INSERT_MAJORS_COURSES_RESULT=$($PSQL "INSERT INTO majors_courses(major_id, course_id) VALUES($MAJOR_ID, $COURSE_ID)")
    if [[ $INSERT_MAJORS_COURSES_RESULT == "INSERT 0 1" ]]
    then
      echo Inserted into majors_courses, $MAJOR : $COURSE
    fi
  fi
done

cat students.csv | while IFS="," read FIRST LAST MAJOR GPA
do
  if [[ $FIRST != "first_name" ]]
  then
    # get major_id
    MAJOR_ID=$($PSQL "SELECT major_id FROM majors WHERE major='$MAJOR'") 

    # if not found
    if [[ -z $MAJOR_ID ]]
    then
      # set to null
      MAJOR_ID=null
    fi

    # insert student
    INSERT_STUDENT_RESULT=$($PSQL "INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('$FIRST', '$LAST', $MAJOR_ID, $GPA)")
    if [[ $INSERT_STUDENT_RESULT == "INSERT 0 1" ]]
    then
      echo Inserted into students, $FIRST $LAST
    fi
  fi
done




-----------------------------------------------------------------------------------------------------------------------------------------------------------

DB students part 2
-----------------------------------------------------------------------------------------------------------------------------------------------------------

rebuild database

psql -U postgres < students.sql "in it to rebuild the database."

queries
students=> SELECT first_name, last_name, gpa FROM students WHERE gpa >= 3.8
;

students=> SELECT * FROM students WHERE last_name < 'M' AND ( gpa =3.9 OR gpa < 2.3);

echo "$($PSQL "SELECT first_name, last_name, gpa FROM students WHERE last_name >= 'R' AND (gpa > 3.8 OR gpa < 2.0)")"

students=> SELECT *  FROM courses WHERE course LIKE '%lgorithms';

students=> SELECT *  FROM courses WHERE course LIKE 'Web%';

students=> SELECT *  FROM courses WHERE course LIKE '_e%';
students=> SELECT *  FROM courses WHERE course LIKE '% %';
students=> SELECT *  FROM courses WHERE course NOT LIKE '% %';
students=> SELECT *  FROM courses WHERE course  ILIKE '%A%' ;
students=> SELECT *  FROM courses WHERE course NOT  ILIKE '%A%' ;
students=> SELECT *  FROM courses WHERE course NOT  ILIKE '%A%' AND course LIKE '% %' ;
echo "$($PSQL "SELECT last_name  FROM students WHERE last_name   ILIKE '%sa%' OR last_name LIKE '%r_'")"

students=> SELECT *  FROM students WHERE gpa IS NULL ;
students=> SELECT *  FROM students WHERE gpa IS NOT  NULL ;

echo "$($PSQL "SELECT first_name, last_name, gpa FROM students WHERE major_id IS NULL AND (first_name LIKE 'D%' OR gpa > 3.0)")"

students=> SELECT *  FROM students ORDER BY gpa;

students=> SELECT *  FROM students ORDER BY gpa DESC;

students=> SELECT *  FROM students ORDER BY gpa DESC, first_Name ;

students=> SELECT *  FROM students ORDER BY gpa DESC, first_Name LIMIT 10 ;

students=> SELECT *  FROM students WHERE gpa IS NOT NULL ORDER BY gpa  DESC, first_Name LIMIT 10 ;                            

students=> SELECT MIN(gpa) FROM students;     
+-----+
| min |
+-----+
| 1.8 |
+-----+
(1 row)

students=> SELECT MAX(gpa) FROM students; 
    
+-----+
| max |
+-----+
| 4.0 |
+-----+
(1 row)

students=> SELECT SUM(major_id) FROM students; 
    
+-----+
| sum |
+-----+
| 878 |
+-----+
(1 row)

students=> SELECT AVG(major_id) FROM students; 
            
+---------------------+
|         avg         |
+---------------------+
| 38.1739130434782609 |
+---------------------+
(1 row)

students=> SELECT CEIL(AVG(major_id)) FROM students; 
students=>     
+------+
| ceil |
+------+
|   39 |
+------+
(1 row)


students=> SELECT ROUND(AVG(major_id)) FROM students; 
     
+-------+
| round |
+-------+
|    38 |
+-------+
(1 row)


students=> SELECT ROUND(AVG(major_id),5) FROM students; 
      
+----------+
|  round   |
+----------+
| 38.17391 |
+----------+
(1 row)

students=> SELECT COUNT(*) FROM majors; 
     
+-------+
| count |
+-------+
|     7 |
+-------+
(1 row)

students=> SELECT DISTINCT(major_id) FROM students; 
      
+----------+
| major_id |
+----------+
|          |
|       42 |
|       41 |
|       38 |
|       36 |
|       37 |
+----------+
(6 rows)

students=> SELECT major_id FROM students GROUP BY major_id; 
      
+----------+
| major_id |
+----------+
|          |
|       42 |
|       41 |
|       38 |
|       36 |
|       37 |
+----------+
(6 rows)

SELECT major_id,  COUNT(*) FROM students GROUP BY major_id; 
+----------+-------+
| major_id | count |
+----------+-------+
|          |     8 |
|       42 |     1 |
|       41 |     6 |
|       38 |     4 |
|       36 |     6 |
|       37 |     6 |
+----------+-------+
(6 rows)

students=> SELECT major_id,  MIN(gpa)  FROM students GROUP BY major_id;
         
+----------+-----+
| major_id | min |
+----------+-----+
|          | 2.3 |
|       42 | 2.6 |
|       41 | 2.1 |
|       38 | 2.2 |
|       36 | 1.9 |
|       37 | 1.8 |
+----------+-----+
(6 rows)

students=> SELECT major_id,  MIN(gpa), MAX(gpa)  FROM students GROUP BY major_id HAVING MAX(gpa) = 4.0;
students=>             
+----------+-----+-----+
| major_id | min | max |
+----------+-----+-----+
|       41 | 2.1 | 4.0 |
|       37 | 1.8 | 4.0 |
+----------+-----+-----+
(2 rows)

students=> SELECT major_id,  MIN(gpa) AS min_gpa, MAX(gpa) as max_gpa  FROM students GROUP BY major_id HAVING MAX(gpa) = 4.0;
                
+----------+---------+---------+
| major_id | min_gpa | max_gpa |
+----------+---------+---------+
|       41 |     2.1 |     4.0 |
|       37 |     1.8 |     4.0 |
+----------+---------+---------+
(2 rows)

students=> SELECT major_id, COUNT(*) as number_of_students  FROM students GROUP BY major_id HAVING COUNT(*) < 8 ;
+----------+--------------------+
| major_id | number_of_students |
+----------+--------------------+
|       42 |                  1 |
|       41 |                  6 |
|       38 |                  4 |
|       36 |                  6 |
|       37 |                  6 |
+----------+--------------------+
(5 rows)


students=> SELECT * FROM students FULL JOIN majors ON students.major_id=majors.major_id;
                                                
+------------+------------+--------------+----------+-----+----------+-------------------------+
| student_id | first_name |  last_name   | major_id | gpa | major_id |          major          |
+------------+------------+--------------+----------+-----+----------+-------------------------+
|          6 | Rhea       | Kellems      |       36 | 2.5 |       36 | Database Administration |
|          7 | Emma       | Gilbert      |          |     |          |                         |
|          8 | Kimberly   | Whitley      |       37 | 3.8 |       37 | Web Development         |
|          9 | Jimmy      | Felipe       |       36 | 3.7 |       36 | Database Administration |
|         10 | Kyle       | Stimson      |          | 2.8 |          |                         |
|         11 | Casares    | Hijo         |       41 | 4.0 |       41 | Game Design             |
|         12 | Noe        | Savage       |          | 3.6 |          |                         |
|         13 | Sterling   | Boss         |       41 | 3.9 |       41 | Game Design             |
|         14 | Brian      | Davis        |          | 2.3 |          |                         |
|         15 | Kaija      | Uronen       |       41 | 3.7 |       41 | Game Design             |
|         16 | Faye       | Conn         |       41 | 2.1 |       41 | Game Design             |
|         17 | Efren      | Reilly       |       37 | 3.9 |       37 | Web Development         |
|         18 | Danh       | Nhung        |          | 2.4 |          |                         |
|         19 | Maxine     | Hagenes      |       36 | 2.9 |       36 | Database Administration |
|         20 | Larry      | Saunders     |       38 | 2.2 |       38 | Data Science            |
|         21 | Karl       | Kuhar        |       37 |     |       37 | Web Development         |
|         22 | Lieke      | Hazenveld    |       41 | 3.5 |       41 | Game Design             |
|         23 | Obie       | Hilpert      |       37 |     |       37 | Web Development         |
|         24 | Peter      | Booysen      |          | 2.9 |          |                         |
|         25 | Nathan     | Turner       |       36 | 3.3 |       36 | Database Administration |
|         26 | Gerald     | Osiki        |       38 | 2.2 |       38 | Data Science            |
|         27 | Vanya      | Hassanah     |       41 | 4.0 |       41 | Game Design             |
|         28 | Roxelana   | Florescu     |       36 | 3.2 |       36 | Database Administration |
|         29 | Helene     | Parker       |       38 | 3.4 |       38 | Data Science            |
|         30 | Mariana    | Russel       |       37 | 1.8 |       37 | Web Development         |
|         31 | Ajit       | Dhungel      |          | 3.0 |          |                         |
|         32 | Mehdi      | Vandenberghe |       36 | 1.9 |       36 | Database Administration |
|         33 | Dejon      | Howell       |       37 | 4.0 |       37 | Web Development         |
|         34 | Aliya      | Gulgowski    |       42 | 2.6 |       42 | System Administration   |
|         35 | Ana        | Tupajic      |       38 | 3.1 |       38 | Data Science            |
|         36 | Hugo       | Duran        |          | 3.8 |          |                         |
|            |            |              |          |     |       39 | Network Engineering     |
|            |            |              |          |     |       40 | Computer Programming    |
+------------+------------+--------------+----------+-----+----------+-------------------------+
(33 rows)


students=> SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id;
students=>                                                 
+------------+------------+--------------+----------+-----+----------+-------------------------+
| student_id | first_name |  last_name   | major_id | gpa | major_id |          major          |
+------------+------------+--------------+----------+-----+----------+-------------------------+
|          6 | Rhea       | Kellems      |       36 | 2.5 |       36 | Database Administration |
|          7 | Emma       | Gilbert      |          |     |          |                         |
|          8 | Kimberly   | Whitley      |       37 | 3.8 |       37 | Web Development         |
|          9 | Jimmy      | Felipe       |       36 | 3.7 |       36 | Database Administration |
|         10 | Kyle       | Stimson      |          | 2.8 |          |                         |
|         11 | Casares    | Hijo         |       41 | 4.0 |       41 | Game Design             |
|         12 | Noe        | Savage       |          | 3.6 |          |                         |
|         13 | Sterling   | Boss         |       41 | 3.9 |       41 | Game Design             |
|         14 | Brian      | Davis        |          | 2.3 |          |                         |
|         15 | Kaija      | Uronen       |       41 | 3.7 |       41 | Game Design             |
|         16 | Faye       | Conn         |       41 | 2.1 |       41 | Game Design             |
|         17 | Efren      | Reilly       |       37 | 3.9 |       37 | Web Development         |
|         18 | Danh       | Nhung        |          | 2.4 |          |                         |
|         19 | Maxine     | Hagenes      |       36 | 2.9 |       36 | Database Administration |
|         20 | Larry      | Saunders     |       38 | 2.2 |       38 | Data Science            |
|         21 | Karl       | Kuhar        |       37 |     |       37 | Web Development         |
|         22 | Lieke      | Hazenveld    |       41 | 3.5 |       41 | Game Design             |
|         23 | Obie       | Hilpert      |       37 |     |       37 | Web Development         |
|         24 | Peter      | Booysen      |          | 2.9 |          |                         |
|         25 | Nathan     | Turner       |       36 | 3.3 |       36 | Database Administration |
|         26 | Gerald     | Osiki        |       38 | 2.2 |       38 | Data Science            |
|         27 | Vanya      | Hassanah     |       41 | 4.0 |       41 | Game Design             |
|         28 | Roxelana   | Florescu     |       36 | 3.2 |       36 | Database Administration |
|         29 | Helene     | Parker       |       38 | 3.4 |       38 | Data Science            |
|         30 | Mariana    | Russel       |       37 | 1.8 |       37 | Web Development         |
|         31 | Ajit       | Dhungel      |          | 3.0 |          |                         |
|         32 | Mehdi      | Vandenberghe |       36 | 1.9 |       36 | Database Administration |
|         33 | Dejon      | Howell       |       37 | 4.0 |       37 | Web Development         |
|         34 | Aliya      | Gulgowski    |       42 | 2.6 |       42 | System Administration   |
|         35 | Ana        | Tupajic      |       38 | 3.1 |       38 | Data Science            |
|         36 | Hugo       | Duran        |          | 3.8 |          |                         |
+------------+------------+--------------+----------+-----+----------+-------------------------+
(31 rows)

students=> SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id;
students=>                                                 
+------------+------------+--------------+----------+-----+----------+-------------------------+
| student_id | first_name |  last_name   | major_id | gpa | major_id |          major          |
+------------+------------+--------------+----------+-----+----------+-------------------------+
|          6 | Rhea       | Kellems      |       36 | 2.5 |       36 | Database Administration |
|          8 | Kimberly   | Whitley      |       37 | 3.8 |       37 | Web Development         |
|          9 | Jimmy      | Felipe       |       36 | 3.7 |       36 | Database Administration |
|         11 | Casares    | Hijo         |       41 | 4.0 |       41 | Game Design             |
|         13 | Sterling   | Boss         |       41 | 3.9 |       41 | Game Design             |
|         15 | Kaija      | Uronen       |       41 | 3.7 |       41 | Game Design             |
|         16 | Faye       | Conn         |       41 | 2.1 |       41 | Game Design             |
|         17 | Efren      | Reilly       |       37 | 3.9 |       37 | Web Development         |
|         19 | Maxine     | Hagenes      |       36 | 2.9 |       36 | Database Administration |
|         20 | Larry      | Saunders     |       38 | 2.2 |       38 | Data Science            |
|         21 | Karl       | Kuhar        |       37 |     |       37 | Web Development         |
|         22 | Lieke      | Hazenveld    |       41 | 3.5 |       41 | Game Design             |
|         23 | Obie       | Hilpert      |       37 |     |       37 | Web Development         |
|         25 | Nathan     | Turner       |       36 | 3.3 |       36 | Database Administration |
|         26 | Gerald     | Osiki        |       38 | 2.2 |       38 | Data Science            |
|         27 | Vanya      | Hassanah     |       41 | 4.0 |       41 | Game Design             |
|         28 | Roxelana   | Florescu     |       36 | 3.2 |       36 | Database Administration |
|         29 | Helene     | Parker       |       38 | 3.4 |       38 | Data Science            |
|         30 | Mariana    | Russel       |       37 | 1.8 |       37 | Web Development         |
|         32 | Mehdi      | Vandenberghe |       36 | 1.9 |       36 | Database Administration |
|         33 | Dejon      | Howell       |       37 | 4.0 |       37 | Web Development         |
|         34 | Aliya      | Gulgowski    |       42 | 2.6 |       42 | System Administration   |
|         35 | Ana        | Tupajic      |       38 | 3.1 |       38 | Data Science            |
|            |            |              |          |     |       39 | Network Engineering     |
|            |            |              |          |     |       40 | Computer Programming    |
+------------+------------+--------------+----------+-----+----------+-------------------------+
(25 rows)

SELECT major_id, COUNT(*), MIN(gpa) FROM students GROUP BY major_id, gpa;
SELECT major_id,  MIN(gpa) FROM students GROUP BY  gpa;
SELECT major_id,  MIN(gpa) FROM students GROUP BY major_id, gpa;
SELECT major_id,  MIN(gpa), COUNT(*) FROM students GROUP BY major_id, gpa;
SELECT major_id,  MIN(gpa),  FROM students GROUP BY major_id, gpa;
SELECT major_id,  MIN(gpa)  FROM students GROUP BY major_id, gpa;
SELECT major_id,  MIN(gpa)  FROM students GROUP BY major_id;
SELECT major_id,  MIN(gpa), MAX(gpa)  FROM students GROUP BY major_id;
SELECT major_id,  MIN(gpa), MAX(gpa)  FROM students GROUP BY major_id HAVING gpa = 4.0;
SELECT major_id,  MIN(gpa), MAX(gpa)  FROM students GROUP BY major_id, gpa HAVING gpa = 4.0;
SELECT major_id,  MIN(gpa), MAX(gpa)  FROM students GROUP BY major_id HAVING MAX(gp) = 4.0;
SELECT major_id,  MIN(gpa), MAX(gpa)  FROM students GROUP BY major_id HAVING MAX(gpa) = 4.0;
SELECT major_id,  MIN(gpa) AS min_gpa, MAX(gpa)  FROM students GROUP BY major_id HAVING MAX(gpa) = 4.0;
SELECT major_id,  MIN(gpa) AS min_gpa, MAX(gpa) as max_gpa  FROM students GROUP BY major_id HAVING MAX(gpa) = 4.0;
SELECT major_id, COUNT(*)  FROM students;
SELECT major_id, COUNT(*)  FROM students GROUP BY major_id ;
SELECT major_id, COUNT(*) as number_of_students  FROM students GROUP BY major_id ;9
SELECT major_id, COUNT(*) as number_of_students  FROM students GROUP BY major_id HAVING COUNT(*) < 8 ;
SELECT major_id, COUNT(*) as number_of_students, ROUND(AVG(gpa),2) as average_gpa  FROM students GROUP BY major_id HAVING COUNT(*) >1 ;
SELECT * FROM students FULL JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM students INNER JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM majors LEFT JOIN students ON majors.major_id=students.major_id;
SELECT * FROM majors LEFT JOIN students ON majors.major_id=students.major_id;
SELECT * FROM majors INNER JOIN students ON majors.major_id=students.major_id;
SELECT * FROM majors RIGHT JOIN students ON majors.major_id=students.major_id;
SELECT * FROM majors FULL JOIN students ON majors.major_id=students.major_id;
SELECT * FROM majors INNER JOIN students ON majors.major_id=students.major_id;
SELECT major FROM majors INNER JOIN students ON majors.major_id=students.major_id;
SELECT DISTINCT(major) FROM majors INNER JOIN students ON majors.major_id=students.major_id;
SELECT * FROM students RIGHT JOIN students ON students.major_id=majors.major_id;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE students_id IS NULL;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE COUNT( students_id)=0;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE COUNT(students_id)=0;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE COUNT(student_id)=0;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE student_id=0;
SELECT * FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE student_id IS NULL;
SELECT major_id FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE student_id IS NULL;
SELECT major FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE student_id IS NULL;
SELECT first_name, last_name,major,gpa FROM students RIGHT JOIN majors ON students.major_id=majors.major_id WHERE student_id IS NULL;
SELECT first_name, last_name,major,gpa FROM students RIGHT JOIN majors ON students.major_id=majors.major_id;
SELECT first_name, last_name,major,gpa FROM students INNER JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id;
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE students.major_id='Data Science';
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE students.major='Data Science';
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE majors.major='Data Science';
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE major='Data Science';
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE major='Data Science' OR gpa>=2.8;
SELECT * FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE major='Data Science' OR gpa>=3.8;
SELECT first_name, last_name, major, gpa FROM students LEFT JOIN majors ON students.major_id=majors.major_id WHERE major='Data Science' OR gpa>=3.8;
SELECT first_name,  major FROM students LEFT JOIN majors ON students.major_id=majors.major_id ;
SELECT first_name,  major FROM students INNER JOIN majors ON students.major_id=majors.major_id ;
SELECT * FROM students FULL JOIN majors ON students.major_id=majors.major_id ;
SELECT * FROM students FULL JOIN majors ON students.major_id=majors.major_id WHERE first_name='%ri%' OR major='%ri%' ;
SELECT * FROM students FULL JOIN majors ON students.major_id=majors.major_id WHERE first_name LIKE '%ri%' OR major LIKE '%ri%' ;
SELECT first_name, major  FROM students FULL JOIN majors ON students.major_id=majors.major_id WHERE first_name LIKE '%ri%' OR major LIKE '%ri%' ;
SELECT *  FROM students FULL JOIN majors ON students.major_id=majors.major_id;
SELECT students.major_id  FROM students FULL JOIN majors ON students.major_id=majors.major_id;
SELECT students.major_id  FROM students FULL JOIN majors AS m ON students.major_id=majors.major_id;
SELECT students.major_id  FROM students FULL JOIN majors AS m ON students.major_id=m.major_id;
SELECT s.major_id  FROM students AS s  FULL JOIN majors AS m ON s.major_id=m.major_id;
SELECT s.major_id  FROM students AS s  FULL JOIN majors AS m USING major_id;
SELECT s.major_id  FROM students AS s  FULL JOIN majors AS m USING(major_id);
SELECT *  FROM students  FULL JOIN majors AS m USING(major_id);
SELECT *  FROM students  FULL JOIN majors  USING(major_id);
SELECT *  FROM students  FULL JOIN majors  USING(major_id) FULL JOIN courses USING(major_id);
SELECT *  FROM students  FULL JOIN majors  USING(major_id) FULL JOIN courses USING(course_id);
SELECT *  FROM students  FULL JOIN majors  USING(major_id) FULL JOIN majors_courses USING(major_id);
SELECT *  FROM students  FULL JOIN majors  USING(major_id) FULL JOIN majors_courses USING(major_id) FULL JOIN courses USING(course_id);

